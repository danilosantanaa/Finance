@page "/account/profile"

@inject AccountService AccountService
@inject IJSRuntime JsRuntine
@inject IConfiguration configuration
@inject SweetAlert Alert

<PageUpsert Model="Account" Title="Editar Conta">
    <div class="profile-content">
        <InputFile OnChange="LoadFile" @ref="InputFile" id="file-profile" hidden />
        <div class="photo-profile @(string.IsNullOrEmpty(Account.ImagemPerfil) ? "male" : "photo-account-profile")" @onclick="OpenInputFile">
            <div class="edit-controls">
                <button class="edit" title="Editar foto de perfil">
                    <i class="fa-solid fa-pen"></i>
                </button>
            </div>
        </div>
    </div>

    <Form Model="Account" class="mt-5">
        <DataAnnotationsValidator />

        <SectionForm>
            <SectionTitle Title="Dados" />
            <FormGroup class="row g-2">
                <div class="col-md-4">
                    <InputTextCustom 
                        @bind-Value="Account.UserName"
                        Validation="() => Account.UserName"
                        class="form-control"
                        disabled="@true" />
                </div>

                <div class="col-md-4">
                    <InputTextCustom 
                        @bind-Value="Account.PrimeiroNome"
                        Validation="() => Account.PrimeiroNome"
                        class="form-control"
                        />
                </div>

                <div class="col-md-4">
                    <InputTextCustom 
                        @bind-Value="Account.UltimoNome"
                        Validation="() => Account.UltimoNome"
                        class="form-control"
                        />
                </div>

                <div class="col-md-2">
                    <InputTextCustom 
                        @bind-Value="Account.Password"
                        Validation="() => Account.Password"
                        class="form-control"
                        type="password"
                        disabled="@false" />
                </div>

                <div class="col-md-2">
                    <InputTextCustom 
                        @bind-Value="Account.ConfirmPassword"
                        Validation="() => Account.ConfirmPassword"
                        type="password"
                        class="form-control" />
                </div>

                <div class="col-md-2">
                    <InputTextCustom 
                        @bind-Value="Account.SenhaAntiga"
                        Validation="() => Account.SenhaAntiga"
                        type="password"
                        class="form-control" />
                </div>

            </FormGroup>

        </SectionForm>

        <ButtonForm IsNew="false" />
    </Form>

    <style>
        .photo-account-profile {
            background-image: url(@GetUrlResourceImage());
            background-size: cover;
            background-position: center center;       
        }
    </style>
</PageUpsert>

@code {
    Account Account;
    InputFile InputFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccount();
    }

    async Task LoadAccount()
    {
        Account = await AccountService.GetProfile();
    }

    async Task OpenInputFile()
    {
        await JsRuntine.InvokeVoidAsync("openInputFile", "#file-profile");
    }

    async Task LoadFile(InputFileChangeEventArgs e)
    {
        try {
            await AccountService.EnviarFotoPerfil(e.File);
            await LoadAccount();

            await Alert.ToastAsync(SweetAlertType.Success, "Foto atualizado com sucesso!");

        } catch(Exception ex) {
            Console.WriteLine(ex.Message);
            await Alert.ToastAsync(SweetAlertType.Error, "Problema ao tentar atualizar a foto");
        }
    }

    string GetUrlResourceImage() =>
        $"{configuration["ApiConfig:Host"]}/resources/{Account.UserName}/{Account.ImagemPerfil}";
}
